2022-04-09 01:26:30,821   unpin        : False
2022-04-09 01:26:30,821   seed         : 1
2022-04-09 01:26:30,821   batch_size   : 1
2022-04-09 01:26:30,821   num_loaders  : 0
2022-04-09 01:26:30,821   log_interval : 1
2022-04-09 01:26:30,821   profile      : False
2022-04-09 01:26:30,821   weight_dir   : savegames
2022-04-09 01:26:30,821   name_load    : None (will not load anything)
2022-04-09 01:26:30,821   out_dir      : out
2022-04-09 01:26:30,822   training config:
2022-04-09 01:26:30,822     max_epochs      : -1
2022-04-09 01:26:30,822     max_iterations  : 1000000
2022-04-09 01:26:30,822     name_save       : stencil2houzz
2022-04-09 01:26:30,822     save_epochs     : -1
2022-04-09 01:26:30,822     save_iterations : 10000
2022-04-09 01:26:30,822     validation      : every 10000
2022-04-09 01:26:30,822   Fake dataset Stencil in data/Stencil/train.txt[train], data/Stencil/val.txt[val], data/Stencil/test.txt[test].
2022-04-09 01:26:30,822   Real dataset Houzz in data/Houzz/files.txt.
2022-04-09 01:26:32,009 VGG16:to: 0
2022-04-09 01:26:34,549 Initializing datasets ...
2022-04-09 01:26:34,550 Mapping paths to dataset IDs (showing first 30 entries):
2022-04-09 01:26:34,550 path2id[00022_FINAL] = 12
2022-04-09 01:26:34,550 path2id[00023_FINAL] = 13
2022-04-09 01:26:34,550 path2id[00024_FINAL] = 14
2022-04-09 01:26:34,550 path2id[00025_FINAL] = 15
2022-04-09 01:26:34,550 path2id[00026_FINAL] = 16
2022-04-09 01:26:34,550 path2id[00027_FINAL] = 11
2022-04-09 01:26:34,551 Found 17 samples.
2022-04-09 01:26:34,554 Mapping paths to dataset IDs (showing first 30 entries):
2022-04-09 01:26:34,554 path2id[00000_FINAL] = 46
2022-04-09 01:26:34,554 path2id[00001_FINAL] = 47
2022-04-09 01:26:34,554 path2id[00002_FINAL] = 48
2022-04-09 01:26:34,554 path2id[00003_FINAL] = 49
2022-04-09 01:26:34,554 path2id[00004_FINAL] = 50
2022-04-09 01:26:34,554 path2id[00005_FINAL] = 51
2022-04-09 01:26:34,554 path2id[00006_FINAL] = 52
2022-04-09 01:26:34,554 path2id[00007_FINAL] = 53
2022-04-09 01:26:34,554 path2id[00008_FINAL] = 54
2022-04-09 01:26:34,554 path2id[00009_FINAL] = 55
2022-04-09 01:26:34,554 path2id[00010_FINAL] = 56
2022-04-09 01:26:34,554 path2id[00011_FINAL] = 57
2022-04-09 01:26:34,554 path2id[00012_FINAL] = 58
2022-04-09 01:26:34,554 path2id[00013_FINAL] = 59
2022-04-09 01:26:34,554 path2id[00014_FINAL] = 60
2022-04-09 01:26:34,555 path2id[00015_FINAL] = 61
2022-04-09 01:26:34,555 path2id[00016_FINAL] = 62
2022-04-09 01:26:34,555 path2id[00017_FINAL] = 63
2022-04-09 01:26:34,555 path2id[00018_FINAL] = 64
2022-04-09 01:26:34,555 path2id[00019_FINAL] = 65
2022-04-09 01:26:34,555 path2id[00020_FINAL] = 66
2022-04-09 01:26:34,555 path2id[00021_FINAL] = 67
2022-04-09 01:26:34,555 path2id[00022_FINAL] = 45
2022-04-09 01:26:34,555 Found 68 samples.
2022-04-09 01:26:34,564 Found 101 images.
2022-04-09 01:26:34,564 Initializing sampling with matching crops ...
2022-04-09 01:26:34,564   src         : Stencil
2022-04-09 01:26:34,564   dst         : Houzz
2022-04-09 01:26:34,565 Loading cached crop matches from "data/matches/match_Stencil-Houzz_1.0.csv" ...
2022-04-09 01:26:34,578 Loaded 3049 crop matches.
2022-04-09 01:26:34,593 Done to 276 crops.
2022-04-09 01:26:34,595 Sampling Initialized.
2022-04-09 01:26:34,595 Initializing networks ...
2022-04-09 01:26:34,595 Fake dataset has 10 classes and 13 G-buffers.
2022-04-09 01:26:34,595 Classes are mapped to G-Buffers via {}.
2022-04-09 01:26:34,595 Intializing network ...
2022-04-09 01:26:34,595   # stages              : 4
2022-04-09 01:26:34,595   G-Buffer encoder type : GBufferEncoderType.ENCODER
2022-04-09 01:26:34,595   G-Buffer encoder norms: residual
2022-04-09 01:26:34,595   G-Buffer norm         : RAD
2022-04-09 01:26:34,595   Transition/Fusion norm: group
2022-04-09 01:26:34,595   # Classes             : 10
2022-04-09 01:26:34,595   # G-Buffer channels   : 13
2022-04-09 01:26:34,596 Creating G-bufferEncoder with residual norm for 10 classes, 13 G-buffers and 4 branches.
2022-04-09 01:26:34,628   Creating joint encoder for 4 branches:
2022-04-09 01:26:34,633   0: Sequential(
  (0): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (relu): ReLU(inplace=True)
  )
  (1): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (relu): ReLU(inplace=True)
  )
)
2022-04-09 01:26:34,639   1: Sequential(
  (0): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (down): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
    )
    (relu): ReLU(inplace=True)
  )
  (1): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (relu): ReLU(inplace=True)
  )
)
2022-04-09 01:26:34,646   2: Sequential(
  (0): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (down): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
    )
    (relu): ReLU(inplace=True)
  )
  (1): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (relu): ReLU(inplace=True)
  )
)
2022-04-09 01:26:34,653   3: Sequential(
  (0): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (down): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
      (2): ReLU(inplace=True)
    )
    (relu): ReLU(inplace=True)
  )
  (1): ResBlock(
    (conv): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (2): ReLU(inplace=True)
      (3): ReplicationPad2d((1, 1, 1, 1))
      (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
    )
    (relu): ReLU(inplace=True)
  )
)
2022-04-09 01:26:34,653   Stage 1
2022-04-09 01:26:34,653   {'NUM_MODULES': 1, 'NUM_BRANCHES': 1, 'NUM_BLOCKS': [4], 'NUM_CHANNELS': [16], 'BLOCK': 'BASIC', 'FUSE_METHOD': 'SUM'}
2022-04-09 01:26:35,031   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,053   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,076   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,108   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,137   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,176   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,215   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,254   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,299   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,345   Creating projection discriminator with 4 layers and group norm.
2022-04-09 01:26:35,393 [ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 128, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 128, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 128, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 128, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
), ProjectionDiscriminator(
  (model): Sequential(
    (0): ReplicationPad2d((1, 1, 1, 1))
    (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (2): GroupNorm(8, 256, eps=1e-05, affine=True)
    (3): LeakyReLU(negative_slope=0.2, inplace=True)
    (4): ReplicationPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (6): GroupNorm(8, 256, eps=1e-05, affine=True)
    (7): LeakyReLU(negative_slope=0.2, inplace=True)
    (8): ReplicationPad2d((1, 1, 1, 1))
    (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (10): GroupNorm(8, 256, eps=1e-05, affine=True)
    (11): LeakyReLU(negative_slope=0.2, inplace=True)
    (12): ReplicationPad2d((1, 1, 1, 1))
    (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (14): GroupNorm(8, 256, eps=1e-05, affine=True)
    (15): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (out): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (embedding): Embedding(194, 256)
)]
2022-04-09 01:26:35,396 Discriminators: ModuleList(
  (0): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 64, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 128, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (1): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 64, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 128, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (2): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 128, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (3): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 128, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (4): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (5): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (6): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (7): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (8): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
  (9): ProjectionDiscriminator(
    (model): Sequential(
      (0): ReplicationPad2d((1, 1, 1, 1))
      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (2): GroupNorm(8, 256, eps=1e-05, affine=True)
      (3): LeakyReLU(negative_slope=0.2, inplace=True)
      (4): ReplicationPad2d((1, 1, 1, 1))
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (6): GroupNorm(8, 256, eps=1e-05, affine=True)
      (7): LeakyReLU(negative_slope=0.2, inplace=True)
      (8): ReplicationPad2d((1, 1, 1, 1))
      (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (10): GroupNorm(8, 256, eps=1e-05, affine=True)
      (11): LeakyReLU(negative_slope=0.2, inplace=True)
      (12): ReplicationPad2d((1, 1, 1, 1))
      (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (14): GroupNorm(8, 256, eps=1e-05, affine=True)
      (15): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (out): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
    (embedding): Embedding(194, 256)
  )
)
2022-04-09 01:26:35,519 AdaptiveBackprop is [on].
2022-04-09 01:26:35,519   check fake performance : [on].
2022-04-09 01:26:35,519   target                 : 0.6
2022-04-09 01:26:35,520 Networks are initialized.
2022-04-09 01:26:35,539 GAN(
  (discriminator): PerceptualProjectionDiscEnsemble(
    (discs): ModuleList(
      (0): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 64, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 128, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (1): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 64, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 128, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (2): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 128, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (3): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 128, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (4): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (5): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (6): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (7): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (8): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
      (9): ProjectionDiscriminator(
        (model): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (2): GroupNorm(8, 256, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (6): GroupNorm(8, 256, eps=1e-05, affine=True)
          (7): LeakyReLU(negative_slope=0.2, inplace=True)
          (8): ReplicationPad2d((1, 1, 1, 1))
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (10): GroupNorm(8, 256, eps=1e-05, affine=True)
          (11): LeakyReLU(negative_slope=0.2, inplace=True)
          (12): ReplicationPad2d((1, 1, 1, 1))
          (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
          (14): GroupNorm(8, 256, eps=1e-05, affine=True)
          (15): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (out): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
        )
        (embedding): Embedding(194, 256)
      )
    )
  )
  (generator): ResidualGenerator(
    (network): HighResolutionNet(
      (stem): Sequential(
        (0): ReplicationPad2d((1, 1, 1, 1))
        (1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (3): ReLU(inplace=True)
        (4): ReplicationPad2d((1, 1, 1, 1))
        (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (6): GroupNorm(8, 16, eps=1e-05, affine=True)
        (7): ReLU(inplace=True)
      )
      (gbuffer_encoder): GBufferEncoder(
        (class_encoders): ModuleList(
          (0): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (1): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (2): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (3): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (4): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (5): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (6): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (7): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (8): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
          (9): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(13, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
          )
        )
        (joint_encoder_layers): ModuleList(
          (0): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (relu): ReLU(inplace=True)
            )
          )
          (1): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (relu): ReLU(inplace=True)
            )
          )
          (2): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (relu): ReLU(inplace=True)
            )
          )
          (3): Sequential(
            (0): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (down): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2))
                (2): ReLU(inplace=True)
              )
              (relu): ReLU(inplace=True)
            )
            (1): ResBlock(
              (conv): Sequential(
                (0): ReplicationPad2d((1, 1, 1, 1))
                (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                (2): ReLU(inplace=True)
                (3): ReplicationPad2d((1, 1, 1, 1))
                (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
              )
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Sequential(
            (0): ReplicationPad2d((1, 1, 1, 1))
            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
          )
          (bn1): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
          (relu): ReLU()
          (conv2): Sequential(
            (0): ReLU(inplace=True)
            (1): Sequential(
              (0): ReplicationPad2d((1, 1, 1, 1))
              (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
            )
          )
          (bn2): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (1): BasicBlock(
          (conv1): Sequential(
            (0): ReplicationPad2d((1, 1, 1, 1))
            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
          )
          (bn1): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
          (relu): ReLU()
          (conv2): Sequential(
            (0): ReLU(inplace=True)
            (1): Sequential(
              (0): ReplicationPad2d((1, 1, 1, 1))
              (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
            )
          )
          (bn2): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (2): BasicBlock(
          (conv1): Sequential(
            (0): ReplicationPad2d((1, 1, 1, 1))
            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
          )
          (bn1): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
          (relu): ReLU()
          (conv2): Sequential(
            (0): ReLU(inplace=True)
            (1): Sequential(
              (0): ReplicationPad2d((1, 1, 1, 1))
              (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
            )
          )
          (bn2): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (3): BasicBlock(
          (conv1): Sequential(
            (0): ReplicationPad2d((1, 1, 1, 1))
            (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
          )
          (bn1): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
          (relu): ReLU()
          (conv2): Sequential(
            (0): ReLU(inplace=True)
            (1): Sequential(
              (0): ReplicationPad2d((1, 1, 1, 1))
              (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
            )
          )
          (bn2): GBufferNorm(
            (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
            (_conv): Sequential(
              (0): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (1): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
              (2): ResBlock(
                (conv): Sequential(
                  (0): ReplicationPad2d((1, 1, 1, 1))
                  (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                  (2): ReLU(inplace=True)
                )
                (relu): ReLU(inplace=True)
              )
            )
            (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
            (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (transitions): ModuleList(
        (0): ModuleList(
          (0): None
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): GroupNorm(8, 32, eps=1e-05, affine=True)
              (2): ReLU()
            )
          )
        )
        (1): ModuleList(
          (0): None
          (1): None
          (2): Sequential(
            (0): Sequential(
              (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): GroupNorm(8, 64, eps=1e-05, affine=True)
              (2): ReLU()
            )
          )
        )
        (2): ModuleList(
          (0): None
          (1): None
          (2): None
          (3): Sequential(
            (0): Sequential(
              (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (1): GroupNorm(8, 128, eps=1e-05, affine=True)
              (2): ReLU()
            )
          )
        )
      )
      (stages): ModuleList(
        (0): Sequential(
          (0): HighResolutionModule(
            (branches): ModuleList(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (1): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
            )
            (fuse_layers): ModuleList(
              (0): ModuleList(
                (0): None
                (1): Sequential(
                  (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
              )
              (1): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 32, eps=1e-05, affine=True)
                  )
                )
                (1): None
              )
            )
            (relu): ReLU()
          )
        )
        (1): Sequential(
          (0): HighResolutionModule(
            (branches): ModuleList(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (1): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (2): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
            )
            (fuse_layers): ModuleList(
              (0): ModuleList(
                (0): None
                (1): Sequential(
                  (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
                (2): Sequential(
                  (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
              )
              (1): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 32, eps=1e-05, affine=True)
                  )
                )
                (1): None
                (2): Sequential(
                  (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 32, eps=1e-05, affine=True)
                )
              )
              (2): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 16, eps=1e-05, affine=True)
                    (3): ReLU()
                  )
                  (1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
                  )
                )
                (1): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
                  )
                )
                (2): None
              )
            )
            (relu): ReLU()
          )
        )
        (2): Sequential(
          (0): HighResolutionModule(
            (branches): ModuleList(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 16, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (1): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 32, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (2): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 64, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
              (3): Sequential(
                (0): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (1): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (2): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
                (3): BasicBlock(
                  (conv1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                  )
                  (bn1): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                  (relu): ReLU()
                  (conv2): Sequential(
                    (0): ReLU(inplace=True)
                    (1): Sequential(
                      (0): ReplicationPad2d((1, 1, 1, 1))
                      (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
                    )
                  )
                  (bn2): GBufferNorm(
                    (_norm): GroupNorm(8, 128, eps=1e-05, affine=False)
                    (_conv): Sequential(
                      (0): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (1): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                      (2): ResBlock(
                        (conv): Sequential(
                          (0): ReplicationPad2d((1, 1, 1, 1))
                          (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
                          (2): ReLU(inplace=True)
                        )
                        (relu): ReLU(inplace=True)
                      )
                    )
                    (_scale): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                    (_bias): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  )
                )
              )
            )
            (fuse_layers): ModuleList(
              (0): ModuleList(
                (0): None
                (1): Sequential(
                  (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
                (2): Sequential(
                  (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
                (3): Sequential(
                  (0): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 16, eps=1e-05, affine=True)
                )
              )
              (1): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 32, eps=1e-05, affine=True)
                  )
                )
                (1): None
                (2): Sequential(
                  (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 32, eps=1e-05, affine=True)
                )
                (3): Sequential(
                  (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 32, eps=1e-05, affine=True)
                )
              )
              (2): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 16, eps=1e-05, affine=True)
                    (3): ReLU()
                  )
                  (1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
                  )
                )
                (1): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 64, eps=1e-05, affine=True)
                  )
                )
                (2): None
                (3): Sequential(
                  (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (1): GroupNorm(8, 64, eps=1e-05, affine=True)
                )
              )
              (3): ModuleList(
                (0): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 16, eps=1e-05, affine=True)
                    (3): ReLU()
                  )
                  (1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 16, eps=1e-05, affine=True)
                    (3): ReLU()
                  )
                  (2): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(16, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 128, eps=1e-05, affine=True)
                  )
                )
                (1): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 32, eps=1e-05, affine=True)
                    (3): ReLU()
                  )
                  (1): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(32, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 128, eps=1e-05, affine=True)
                  )
                )
                (2): Sequential(
                  (0): Sequential(
                    (0): ReplicationPad2d((1, 1, 1, 1))
                    (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
                    (2): GroupNorm(8, 128, eps=1e-05, affine=True)
                  )
                )
                (3): None
              )
            )
            (relu): ReLU()
          )
        )
      )
      (up_layers): ModuleList(
        (0): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1))
          (2): GroupNorm(8, 64, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (1): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1))
          (2): GroupNorm(8, 32, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (2): Sequential(
          (0): ReplicationPad2d((1, 1, 1, 1))
          (1): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1))
          (2): GroupNorm(8, 16, eps=1e-05, affine=True)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
          (4): ReplicationPad2d((1, 1, 1, 1))
          (5): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1))
        )
      )
    )
  )
)
2022-04-09 01:26:35,575   learning rate : 0.0001
2022-04-09 01:26:35,575   clip grad norm: 1000.0
2022-04-09 01:26:35,575   clip_weights  : -1.0
2022-04-09 01:26:35,576   optimizer     : adam
2022-04-09 01:26:35,576     ams         : False
2022-04-09 01:26:35,576     beta        : 0.9
2022-04-09 01:26:35,576     beta2       : 0.999
2022-04-09 01:26:35,588   learning rate : 0.0001
2022-04-09 01:26:35,588   clip grad norm: 1000.0
2022-04-09 01:26:35,588   clip_weights  : -1.0
2022-04-09 01:26:35,588   optimizer     : adam
2022-04-09 01:26:35,588     ams         : False
2022-04-09 01:26:35,588     beta        : 0.9
2022-04-09 01:26:35,588     beta2       : 0.999
2022-04-09 01:26:35,603 _get_cropped_items:
2022-04-09 01:26:35,604   src[184](45|(558, 754, 667, 863)) : /home/dziurawy-beret/dataset_final/00022_FINAL.png
2022-04-09 01:26:35,604   dst[184](66|(562, 758, 477, 673)) : /home/dziurawy-beret/houzz_final/00066.jpg
2022-04-09 01:26:35,611 STREAM b'IHDR' 16 13
2022-04-09 01:26:35,611 STREAM b'IDAT' 41 2149309
2022-04-09 01:26:35,816 STREAM b'IHDR' 16 13
2022-04-09 01:26:35,816 STREAM b'IDAT' 41 34750
2022-04-09 01:26:35,889 STREAM b'IHDR' 16 13
2022-04-09 01:26:35,889 STREAM b'IDAT' 41 8192
2022-04-09 01:26:35,923 STREAM b'IHDR' 16 13
2022-04-09 01:26:35,924 STREAM b'IDAT' 41 8192
2022-04-09 01:26:35,941 IENet:forward(i:torch.Size([1, 4, 196, 196]), g:torch.Size([1, 13, 196, 196]), s:torch.Size([1, 10, 196, 196]))
2022-04-09 01:26:35,941 G-BufferEncoder:forward(g:torch.Size([1, 13, 196, 196]), c:torch.Size([1, 10, 196, 196]))
2022-04-09 01:26:35,941 SHAPE: torch.Size([1, 1, 196, 196]) torch.Size([1, 13, 196, 196])
2022-04-09 01:26:36,559   Encoded G-buffers for 4 branches:
2022-04-09 01:26:36,559   0: torch.Size([1, 128, 196, 196])
2022-04-09 01:26:36,559   1: torch.Size([1, 128, 98, 98])
2022-04-09 01:26:36,559   2: torch.Size([1, 128, 49, 49])
2022-04-09 01:26:36,559   3: torch.Size([1, 128, 25, 25])
2022-04-09 01:26:36,668 Saving model to savegames/stencil2houzz-0-break.
2022-04-09 01:26:39,436 Unexpected error: <class 'RuntimeError'>
